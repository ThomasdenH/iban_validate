///! This file is automatically generated by `iban_validate_registry_generation` from the IBAN registry.

/// Get the position of the bank in the BBAN.
pub(crate) fn bank_identifier(country_code: &str) -> Option<core::ops::Range<usize>> {
	#[allow(clippy::match_same_arms)] // For clarity, identical arms are not combined.
	match country_code {
		"AD" => Some(0..4),
		"AE" => Some(0..3),
		// The bank identifier length (8) does not match the range (0..3) in the registry. Using length as truth.
		"AL" => Some(0..8),
		"AT" => Some(0..5),
		"AZ" => Some(0..4),
		"BA" => Some(0..3),
		"BE" => Some(0..3),
		"BG" => Some(0..4),
		"BH" => Some(0..4),
		"BI" => Some(0..5),
		"BR" => Some(0..8),
		"BY" => Some(0..4),
		"CH" => Some(0..5),
		"CR" => Some(0..4),
		"CY" => Some(0..3),
		"CZ" => Some(0..4),
		"DE" => Some(0..8),
		"DJ" => Some(0..5),
		"DK" => Some(0..4),
		"DO" => Some(0..4),
		"EE" => Some(0..2),
		"EG" => Some(0..4),
		"ES" => Some(0..4),
		"FI" => Some(0..3),
		"FK" => Some(0..2),
		"FO" => Some(0..4),
		"FR" => Some(0..5),
		"GB" => Some(0..4),
		"GE" => Some(0..2),
		"GI" => Some(0..4),
		"GL" => Some(0..4),
		"GR" => Some(0..3),
		"GT" => Some(0..4),
		"HR" => Some(0..7),
		"HU" => Some(0..3),
		"IE" => Some(0..4),
		"IL" => Some(0..3),
		"IQ" => Some(0..4),
		"IS" => Some(0..2),
		"IT" => Some(1..6),
		// Jordan has an incorrect bank identifier range in the registry.
		"JO" => Some(0..4),
		"KW" => Some(0..4),
		"KZ" => Some(0..3),
		"LB" => Some(0..4),
		"LC" => Some(0..4),
		"LI" => Some(0..5),
		"LT" => Some(0..5),
		"LU" => Some(0..3),
		"LV" => Some(0..4),
		"LY" => Some(0..3),
		"MC" => Some(0..5),
		"MD" => Some(0..2),
		"ME" => Some(0..3),
		"MK" => Some(0..3),
		"MN" => Some(0..4),
		"MR" => Some(0..5),
		"MT" => Some(0..4),
		"MU" => Some(0..6),
		"NI" => Some(0..4),
		"NL" => Some(0..4),
		"NO" => Some(0..4),
		"OM" => Some(0..3),
		"PL" => None,
		"PS" => Some(0..4),
		"PT" => Some(0..4),
		"QA" => Some(0..4),
		"RO" => Some(0..4),
		"RS" => Some(0..3),
		"RU" => Some(0..9),
		"SA" => Some(0..2),
		"SC" => Some(0..6),
		"SD" => Some(0..2),
		"SE" => Some(0..3),
		"SI" => Some(0..5),
		"SK" => Some(0..4),
		"SM" => Some(1..6),
		"SO" => Some(0..4),
		"ST" => Some(0..4),
		"SV" => Some(0..4),
		"TL" => Some(0..3),
		"TN" => Some(0..2),
		"TR" => Some(0..5),
		"UA" => Some(0..6),
		"VA" => Some(0..3),
		"VG" => Some(0..4),
		"XK" => Some(0..2),
		"YE" => Some(0..4),
		_ => None,
	}
}

/// Get the position of the branch in the BBAN.
pub(crate) fn branch_identifier(country_code: &str) -> Option<core::ops::Range<usize>> {
	#[allow(clippy::match_same_arms)] // For clarity, identical arms are not combined.
	match country_code {
		"AD" => Some(4..8),
		"AE" => None,
		// The registry branch example ("1100") does not have the length as expected from the position range (3..8).
		// Assume the example is correct, see generation code for details.
		"AL" => Some(3..7),
		"AT" => None,
		"AZ" => None,
		"BA" => Some(3..6),
		"BE" => None,
		"BG" => Some(4..8),
		"BH" => None,
		"BI" => Some(5..10),
		"BR" => Some(8..13),
		"BY" => None,
		"CH" => None,
		"CR" => None,
		"CY" => Some(3..8),
		"CZ" => None,
		"DE" => None,
		"DJ" => Some(5..10),
		"DK" => None,
		"DO" => None,
		"EE" => None,
		"EG" => Some(4..8),
		"ES" => Some(4..8),
		"FI" => None,
		"FK" => None,
		"FO" => None,
		"FR" => None,
		"GB" => Some(4..10),
		"GE" => None,
		"GI" => None,
		"GL" => None,
		"GR" => Some(3..7),
		"GT" => None,
		"HR" => None,
		"HU" => Some(3..7),
		"IE" => Some(4..10),
		"IL" => Some(3..6),
		"IQ" => Some(4..7),
		"IS" => Some(2..4),
		"IT" => Some(6..11),
		// The registry doesn't provide an example.
		"JO" => Some(4..8),
		"KW" => None,
		"KZ" => None,
		"LB" => None,
		"LC" => None,
		"LI" => None,
		"LT" => None,
		"LU" => None,
		"LV" => None,
		"LY" => Some(3..6),
		"MC" => Some(5..10),
		"MD" => None,
		"ME" => None,
		"MK" => None,
		"MN" => None,
		"MR" => Some(5..10),
		"MT" => Some(4..9),
		"MU" => Some(6..8),
		"NI" => None,
		"NL" => None,
		"NO" => None,
		"OM" => None,
		"PL" => Some(0..8),
		"PS" => None,
		"PT" => Some(4..8),
		"QA" => None,
		"RO" => None,
		"RS" => None,
		"RU" => Some(9..14),
		"SA" => None,
		"SC" => Some(6..8),
		"SD" => None,
		"SE" => None,
		"SI" => None,
		"SK" => None,
		"SM" => Some(6..11),
		"SO" => Some(4..7),
		"ST" => Some(4..8),
		"SV" => None,
		"TL" => None,
		"TN" => Some(2..5),
		"TR" => None,
		"UA" => None,
		"VA" => None,
		"VG" => None,
		"XK" => Some(2..4),
		"YE" => Some(4..8),
		_ => None,
	}
}

use crate::countries::CharacterType;

pub(crate) fn country_pattern(country_code: &str) -> Option<&[(usize, CharacterType)]> {
	use CharacterType::*;
	use core::borrow::Borrow;
	match country_code {
		"AD" => Some([(4, N), (4, N), (12, C)].borrow()),
		"AE" => Some([(3, N), (16, N)].borrow()),
		"AL" => Some([(8, N), (16, C)].borrow()),
		"AT" => Some([(5, N), (11, N)].borrow()),
		"AZ" => Some([(4, A), (20, C)].borrow()),
		"BA" => Some([(3, N), (3, N), (8, N), (2, N)].borrow()),
		"BE" => Some([(3, N), (7, N), (2, N)].borrow()),
		"BG" => Some([(4, A), (4, N), (2, N), (8, C)].borrow()),
		"BH" => Some([(4, A), (14, C)].borrow()),
		"BI" => Some([(5, N), (5, N), (11, N), (2, N)].borrow()),
		"BR" => Some([(8, N), (5, N), (10, N), (1, A), (1, C)].borrow()),
		"BY" => Some([(4, C), (4, N), (16, C)].borrow()),
		"CH" => Some([(5, N), (12, C)].borrow()),
		"CR" => Some([(4, N), (14, N)].borrow()),
		"CY" => Some([(3, N), (5, N), (16, C)].borrow()),
		"CZ" => Some([(4, N), (6, N), (10, N)].borrow()),
		"DE" => Some([(8, N), (10, N)].borrow()),
		"DJ" => Some([(5, N), (5, N), (11, N), (2, N)].borrow()),
		"DK" => Some([(4, N), (9, N), (1, N)].borrow()),
		"DO" => Some([(4, C), (20, N)].borrow()),
		"EE" => Some([(2, N), (2, N), (11, N), (1, N)].borrow()),
		"EG" => Some([(4, N), (4, N), (17, N)].borrow()),
		"ES" => Some([(4, N), (4, N), (1, N), (1, N), (10, N)].borrow()),
		"FI" => Some([(3, N), (11, N)].borrow()),
		"FK" => Some([(2, A), (12, N)].borrow()),
		"FO" => Some([(4, N), (9, N), (1, N)].borrow()),
		"FR" => Some([(5, N), (5, N), (11, C), (2, N)].borrow()),
		"GB" => Some([(4, A), (6, N), (8, N)].borrow()),
		"GE" => Some([(2, A), (16, N)].borrow()),
		"GI" => Some([(4, A), (15, C)].borrow()),
		"GL" => Some([(4, N), (9, N), (1, N)].borrow()),
		"GR" => Some([(3, N), (4, N), (16, C)].borrow()),
		"GT" => Some([(4, C), (20, C)].borrow()),
		"HR" => Some([(7, N), (10, N)].borrow()),
		"HU" => Some([(3, N), (4, N), (1, N), (15, N), (1, N)].borrow()),
		"IE" => Some([(4, A), (6, N), (8, N)].borrow()),
		"IL" => Some([(3, N), (3, N), (13, N)].borrow()),
		"IQ" => Some([(4, A), (3, N), (12, N)].borrow()),
		"IS" => Some([(4, N), (2, N), (6, N), (10, N)].borrow()),
		"IT" => Some([(1, A), (5, N), (5, N), (12, C)].borrow()),
		"JO" => Some([(4, A), (4, N), (18, C)].borrow()),
		"KW" => Some([(4, A), (22, C)].borrow()),
		"KZ" => Some([(3, N), (13, C)].borrow()),
		"LB" => Some([(4, N), (20, C)].borrow()),
		"LC" => Some([(4, A), (24, C)].borrow()),
		"LI" => Some([(5, N), (12, C)].borrow()),
		"LT" => Some([(5, N), (11, N)].borrow()),
		"LU" => Some([(3, N), (13, C)].borrow()),
		"LV" => Some([(4, A), (13, C)].borrow()),
		"LY" => Some([(3, N), (3, N), (15, N)].borrow()),
		"MC" => Some([(5, N), (5, N), (11, C), (2, N)].borrow()),
		"MD" => Some([(2, C), (18, C)].borrow()),
		"ME" => Some([(3, N), (13, N), (2, N)].borrow()),
		"MK" => Some([(3, N), (10, C), (2, N)].borrow()),
		"MN" => Some([(4, N), (12, N)].borrow()),
		"MR" => Some([(5, N), (5, N), (11, N), (2, N)].borrow()),
		"MT" => Some([(4, A), (5, N), (18, C)].borrow()),
		"MU" => Some([(4, A), (2, N), (2, N), (12, N), (3, N), (3, A)].borrow()),
		"NI" => Some([(4, A), (20, N)].borrow()),
		"NL" => Some([(4, A), (10, N)].borrow()),
		"NO" => Some([(4, N), (6, N), (1, N)].borrow()),
		"OM" => Some([(3, N), (16, C)].borrow()),
		"PL" => Some([(8, N), (16, N)].borrow()),
		"PS" => Some([(4, A), (21, C)].borrow()),
		"PT" => Some([(4, N), (4, N), (11, N), (2, N)].borrow()),
		"QA" => Some([(4, A), (21, C)].borrow()),
		"RO" => Some([(4, A), (16, C)].borrow()),
		"RS" => Some([(3, N), (13, N), (2, N)].borrow()),
		"RU" => Some([(9, N), (5, N), (15, C)].borrow()),
		"SA" => Some([(2, N), (18, C)].borrow()),
		"SC" => Some([(4, A), (2, N), (2, N), (16, N), (3, A)].borrow()),
		"SD" => Some([(2, N), (12, N)].borrow()),
		"SE" => Some([(3, N), (16, N), (1, N)].borrow()),
		"SI" => Some([(5, N), (8, N), (2, N)].borrow()),
		"SK" => Some([(4, N), (6, N), (10, N)].borrow()),
		"SM" => Some([(1, A), (5, N), (5, N), (12, C)].borrow()),
		"SO" => Some([(4, N), (3, N), (12, N)].borrow()),
		"ST" => Some([(4, N), (4, N), (11, N), (2, N)].borrow()),
		"SV" => Some([(4, A), (20, N)].borrow()),
		"TL" => Some([(3, N), (14, N), (2, N)].borrow()),
		"TN" => Some([(2, N), (3, N), (13, N), (2, N)].borrow()),
		"TR" => Some([(5, N), (1, N), (16, C)].borrow()),
		"UA" => Some([(6, N), (19, C)].borrow()),
		"VA" => Some([(3, N), (15, N)].borrow()),
		"VG" => Some([(4, A), (16, N)].borrow()),
		"XK" => Some([(4, N), (10, N), (2, N)].borrow()),
		"YE" => Some([(4, A), (4, N), (18, C)].borrow()),
		_ => None
	}
}
